import React, { useState } from 'react';
import { 
  Button, 
  Modal, 
  Alert, 
  Input,
  Badge,
  StatusIndicator,
  Card 
} from '../index';
import { Trash2, Edit, Plus, AlertTriangle } from 'lucide-react';

/**
 * ModalExample - Demonstrates modal dialogs with different use cases
 * 
 * Features:
 * - Confirmation dialogs
 * - Form modals
 * - Info modals
 * - Focus management
 * - Nested interactions
 */
export const ModalExample: React.FC = () => {
  const [modals, setModals] = useState({
    confirmation: false,
    form: false,
    info: false,
    nested: false
  });
  
  const [formData, setFormData] = useState({
    name: '',
    status: 'active' as const
  });

  const [jobs] = useState([
    { id: 1, name: 'Daily Backup', status: 'active' as const, lastRun: '2024-01-15' },
    { id: 2, name: 'Weekly Report', status: 'inactive' as const, lastRun: '2024-01-10' },
    { id: 3, name: 'Data Sync', status: 'error' as const, lastRun: '2024-01-14' }
  ]);

  const openModal = (modalType: keyof typeof modals) => {
    setModals(prev => ({ ...prev, [modalType]: true }));
  };

  const closeModal = (modalType: keyof typeof modals) => {
    setModals(prev => ({ ...prev, [modalType]: false }));
  };

  const handleDelete = () => {
    // Simulate delete action
    closeModal('confirmation');
    // In real app, would call API here
  };

  const handleFormSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    // Simulate form submission
    closeModal('form');
    setFormData({ name: '', status: 'active' });
  };

  return (
    <div className="max-w-4xl mx-auto p-6">
      <Card>
        <Card.Header>
          <h1 className="text-2xl font-bold text-gray-900">
            Modal Examples
          </h1>
          <p className="text-gray-600 mt-2">
            Various modal dialog patterns with proper focus management
          </p>
        </Card.Header>

        <Card.Content>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-8">
            <Button
              variant="danger"
              icon={<Trash2 />}
              onClick={() => openModal('confirmation')}
              data-testid="delete-button"
            >
              Delete Item
            </Button>

            <Button
              variant="primary"
              icon={<Plus />}
              onClick={() => openModal('form')}
              data-testid="add-button"
            >
              Add New Job
            </Button>

            <Button
              variant="secondary"
              onClick={() => openModal('info')}
              data-testid="info-button"
            >
              View Details
            </Button>

            <Button
              variant="secondary"
              onClick={() => openModal('nested')}
              data-testid="nested-button"
            >
              Nested Modal
            </Button>
          </div>

          {/* Sample Data Table */}
          <div className="border rounded-lg overflow-hidden">
            <table className="w-full">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-4 py-3 text-left text-sm font-medium text-gray-900">
                    Job Name
                  </th>
                  <th className="px-4 py-3 text-left text-sm font-medium text-gray-900">
                    Status
                  </th>
                  <th className="px-4 py-3 text-left text-sm font-medium text-gray-900">
                    Last Run
                  </th>
                  <th className="px-4 py-3 text-left text-sm font-medium text-gray-900">
                    Actions
                  </th>
                </tr>
              </thead>
              <tbody className="divide-y divide-gray-200">
                {jobs.map((job) => (
                  <tr key={job.id} className="hover:bg-gray-50">
                    <td className="px-4 py-3 text-sm text-gray-900">
                      {job.name}
                    </td>
                    <td className="px-4 py-3">
                      <StatusIndicator
                        status={job.status}
                        size="sm"
                        pulse={job.status === 'active'}
                      />
                    </td>
                    <td className="px-4 py-3 text-sm text-gray-600">
                      {job.lastRun}
                    </td>
                    <td className="px-4 py-3">
                      <div className="flex gap-2">
                        <Button
                          variant="secondary"
                          size="sm"
                          icon={<Edit />}
                          onClick={() => openModal('form')}
                        >
                          Edit
                        </Button>
                        <Button
                          variant="danger"
                          size="sm"
                          icon={<Trash2 />}
                          onClick={() => openModal('confirmation')}
                        >
                          Delete
                        </Button>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </Card.Content>
      </Card>

      {/* Confirmation Modal */}
      <Modal
        isOpen={modals.confirmation}
        onClose={() => closeModal('confirmation')}
        title="Confirm Delete"
        size="sm"
        data-testid="confirmation-modal"
      >
        <div className="space-y-4">
          <div className="flex items-center gap-3">
            <div className="p-2 bg-red-100 rounded-full">
              <AlertTriangle className="h-6 w-6 text-red-600" />
            </div>
            <div>
              <p className="text-gray-900 font-medium">
                Are you sure you want to delete this item?
              </p>
              <p className="text-gray-600 text-sm mt-1">
                This action cannot be undone.
              </p>
            </div>
          </div>

          <div className="flex gap-3 pt-4">
            <Button
              variant="danger"
              onClick={handleDelete}
              className="flex-1"
              data-testid="confirm-delete"
            >
              Delete
            </Button>
            <Button
              variant="secondary"
              onClick={() => closeModal('confirmation')}
              className="flex-1"
              data-testid="cancel-delete"
            >
              Cancel
            </Button>
          </div>
        </div>
      </Modal>

      {/* Form Modal */}
      <Modal
        isOpen={modals.form}
        onClose={() => closeModal('form')}
        title="Add New Cron Job"
        size="md"
        data-testid="form-modal"
      >
        <form onSubmit={handleFormSubmit} className="space-y-4">
          <Alert variant="info" className="text-sm">
            Create a new scheduled job for your application
          </Alert>

          <Input
            label="Job Name"
            placeholder="Enter job name"
            value={formData.name}
            onChange={(value) => setFormData(prev => ({ ...prev, name: value }))}
            required
            data-testid="job-name-input"
          />

          <div className="space-y-2">
            <label className="block text-sm font-medium text-gray-700">
              Initial Status
            </label>
            <div className="flex gap-2">
              <Badge
                variant={formData.status === 'active' ? 'solid' : 'outline'}
                color="green"
                className="cursor-pointer"
                onClick={() => setFormData(prev => ({ ...prev, status: 'active' }))}
              >
                Active
              </Badge>
              <Badge
                variant={formData.status === 'inactive' ? 'solid' : 'outline'}
                color="gray"
                className="cursor-pointer"
                onClick={() => setFormData(prev => ({ ...prev, status: 'inactive' }))}
              >
                Inactive
              </Badge>
            </div>
          </div>

          <div className="flex gap-3 pt-6">
            <Button
              type="submit"
              variant="primary"
              className="flex-1"
              data-testid="submit-job"
            >
              Create Job
            </Button>
            <Button
              type="button"
              variant="secondary"
              onClick={() => closeModal('form')}
              className="flex-1"
              data-testid="cancel-job"
            >
              Cancel
            </Button>
          </div>
        </form>
      </Modal>

      {/* Info Modal */}
      <Modal
        isOpen={modals.info}
        onClose={() => closeModal('info')}
        title="Job Details"
        size="lg"
        data-testid="info-modal"
      >
        <div className="space-y-6">
          <div className="grid grid-cols-2 gap-4">
            <div>
              <h3 className="text-sm font-medium text-gray-900 mb-2">
                Job Information
              </h3>
              <div className="space-y-2 text-sm">
                <div className="flex justify-between">
                  <span className="text-gray-600">Name:</span>
                  <span className="text-gray-900">Daily Backup</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">Schedule:</span>
                  <span className="text-gray-900">0 2 * * *</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">Status:</span>
                  <StatusIndicator status="active" size="sm" />
                </div>
              </div>
            </div>

            <div>
              <h3 className="text-sm font-medium text-gray-900 mb-2">
                Execution Stats
              </h3>
              <div className="space-y-2 text-sm">
                <div className="flex justify-between">
                  <span className="text-gray-600">Success Rate:</span>
                  <span className="text-green-600 font-medium">98.5%</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">Last Success:</span>
                  <span className="text-gray-900">2 hours ago</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">Total Runs:</span>
                  <span className="text-gray-900">1,247</span>
                </div>
              </div>
            </div>
          </div>

          <Alert variant="success">
            This job is running smoothly with high success rates.
          </Alert>

          <div className="flex justify-end">
            <Button
              variant="secondary"
              onClick={() => closeModal('info')}
              data-testid="close-info"
            >
              Close
            </Button>
          </div>
        </div>
      </Modal>

      {/* Nested Modal Example */}
      <Modal
        isOpen={modals.nested}
        onClose={() => closeModal('nested')}
        title="Parent Modal"
        size="md"
        data-testid="parent-modal"
      >
        <div className="space-y-4">
          <p className="text-gray-600">
            This demonstrates nested modals and proper focus management.
          </p>
          
          <Button
            variant="primary"
            onClick={() => openModal('confirmation')}
            data-testid="open-nested"
          >
            Open Confirmation Dialog
          </Button>

          <div className="pt-4">
            <Button
              variant="secondary"
              onClick={() => closeModal('nested')}
              data-testid="close-parent"
            >
              Close
            </Button>
          </div>
        </div>
      </Modal>

      {/* Implementation Notes */}
      <Card className="mt-8">
        <Card.Header>
          <h2 className="text-lg font-semibold">Modal Implementation Features</h2>
        </Card.Header>
        <Card.Content>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6 text-sm">
            <div>
              <h3 className="font-medium text-gray-900 mb-2">Accessibility:</h3>
              <ul className="list-disc list-inside text-gray-600 space-y-1">
                <li>Focus trapped within modal</li>
                <li>ESC key closes modal</li>
                <li>Focus returned to trigger element</li>
                <li>ARIA labels and roles</li>
                <li>Screen reader announcements</li>
              </ul>
            </div>
            
            <div>
              <h3 className="font-medium text-gray-900 mb-2">UX Features:</h3>
              <ul className="list-disc list-inside text-gray-600 space-y-1">
                <li>Backdrop click closes modal</li>
                <li>Smooth animations</li>
                <li>Body scroll lock</li>
                <li>Nested modal support</li>
                <li>Size variants (sm, md, lg)</li>
              </ul>
            </div>
          </div>
        </Card.Content>
      </Card>
    </div>
  );
};

export default ModalExample;