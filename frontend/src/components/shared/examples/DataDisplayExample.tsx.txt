import React, { useState } from 'react';
import { 
  Table, 
  Badge, 
  StatusIndicator, 
  Spinner, 
  Skeleton,
  Card,
  Button,
  Alert
} from '../index';
import { PlayCircle, PauseCircle, RotateCw } from 'lucide-react';
import type { TableColumn } from '../types';

/**
 * DataDisplayExample - Demonstrates data presentation components
 * 
 * Features:
 * - Table with sorting and selection
 * - Status indicators and badges
 * - Loading states
 * - Responsive data display
 */

interface JobData {
  id: string;
  name: string;
  category: string;
  status: 'active' | 'inactive' | 'error' | 'pending';
  schedule: string;
  lastRun: string;
  nextRun: string;
  successRate: number;
  totalRuns: number;
}

export const DataDisplayExample: React.FC = () => {
  const [selectedRows, setSelectedRows] = useState<string[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [sortConfig, setSortConfig] = useState<{ key: string; direction: 'asc' | 'desc' } | null>(null);

  const [jobs] = useState<JobData[]>([
    {
      id: '1',
      name: 'Daily Database Backup',
      category: 'Maintenance',
      status: 'active',
      schedule: '0 2 * * *',
      lastRun: '2024-01-15 02:00:00',
      nextRun: '2024-01-16 02:00:00',
      successRate: 98.5,
      totalRuns: 1247
    },
    {
      id: '2',
      name: 'Weekly Report Generation',
      category: 'Reports',
      status: 'active',
      schedule: '0 9 * * 1',
      lastRun: '2024-01-14 09:00:00',
      nextRun: '2024-01-21 09:00:00',
      successRate: 95.2,
      totalRuns: 89
    },
    {
      id: '3',
      name: 'API Health Check',
      category: 'Monitoring',
      status: 'error',
      schedule: '*/5 * * * *',
      lastRun: '2024-01-15 14:25:00',
      nextRun: '2024-01-15 14:30:00',
      successRate: 87.3,
      totalRuns: 4832
    },
    {
      id: '4',
      name: 'Data Synchronization',
      category: 'Integration',
      status: 'pending',
      schedule: '0 */6 * * *',
      lastRun: '2024-01-15 12:00:00',
      nextRun: '2024-01-15 18:00:00',
      successRate: 92.1,
      totalRuns: 567
    },
    {
      id: '5',
      name: 'Cache Cleanup',
      category: 'Maintenance',
      status: 'inactive',
      schedule: '0 1 * * *',
      lastRun: '2024-01-10 01:00:00',
      nextRun: 'Not scheduled',
      successRate: 100.0,
      totalRuns: 345
    }
  ]);

  const columns: TableColumn<JobData>[] = [
    {
      key: 'name',
      label: 'Job Name',
      sortable: true,
      render: (job) => (
        <div>
          <div className="font-medium text-gray-900">{job.name}</div>
          <div className="text-sm text-gray-500">{job.schedule}</div>
        </div>
      )
    },
    {
      key: 'category',
      label: 'Category',
      sortable: true,
      render: (job) => (
        <Badge
          variant="soft"
          color={getCategoryColor(job.category)}
          size="sm"
        >
          {job.category}
        </Badge>
      )
    },
    {
      key: 'status',
      label: 'Status',
      sortable: true,
      render: (job) => (
        <StatusIndicator
          status={job.status}
          size="sm"
          pulse={job.status === 'active'}
          variant="detailed"
        />
      )
    },
    {
      key: 'successRate',
      label: 'Success Rate',
      sortable: true,
      render: (job) => (
        <div className="text-right">
          <div className={`font-medium ${getSuccessRateColor(job.successRate)}`}>
            {job.successRate.toFixed(1)}%
          </div>
          <div className="text-xs text-gray-500">
            {job.totalRuns.toLocaleString()} runs
          </div>
        </div>
      )
    },
    {
      key: 'lastRun',
      label: 'Last Run',
      sortable: true,
      render: (job) => (
        <div className="text-sm">
          <div className="text-gray-900">{formatDate(job.lastRun)}</div>
          <div className="text-gray-500">{formatTime(job.lastRun)}</div>
        </div>
      )
    },
    {
      key: 'actions',
      label: 'Actions',
      render: (job) => (
        <div className="flex gap-1">
          {job.status === 'active' ? (
            <Button
              variant="secondary"
              size="sm"
              icon={<PauseCircle />}
              onClick={() => handleToggleJob(job.id, 'pause')}
              data-testid={`pause-${job.id}`}
            >
              Pause
            </Button>
          ) : (
            <Button
              variant="secondary"
              size="sm"
              icon={<PlayCircle />}
              onClick={() => handleToggleJob(job.id, 'resume')}
              data-testid={`resume-${job.id}`}
            >
              Resume
            </Button>
          )}
          <Button
            variant="secondary"
            size="sm"
            icon={<RotateCw />}
            onClick={() => handleRunJob(job.id)}
            data-testid={`run-${job.id}`}
          >
            Run
          </Button>
        </div>
      )
    }
  ];

  const getCategoryColor = (category: string) => {
    const colors: Record<string, string> = {
      'Maintenance': 'blue',
      'Reports': 'green',
      'Monitoring': 'yellow',
      'Integration': 'purple'
    };
    return colors[category] || 'gray';
  };

  const getSuccessRateColor = (rate: number) => {
    if (rate >= 95) return 'text-green-600';
    if (rate >= 90) return 'text-yellow-600';
    return 'text-red-600';
  };

  const formatDate = (dateString: string) => {
    if (dateString === 'Not scheduled') return dateString;
    return new Date(dateString).toLocaleDateString();
  };

  const formatTime = (dateString: string) => {
    if (dateString === 'Not scheduled') return '';
    return new Date(dateString).toLocaleTimeString();
  };

  const handleSort = (column: TableColumn<JobData>) => {
    if (!column.sortable) return;
    
    const direction = sortConfig?.key === column.key && sortConfig.direction === 'asc' 
      ? 'desc' 
      : 'asc';
    
    setSortConfig({ key: column.key, direction });
  };

  const handleSelect = (selectedIds: string[]) => {
    setSelectedRows(selectedIds);
  };

  const handleToggleJob = async (jobId: string, action: 'pause' | 'resume') => {
    setIsLoading(true);
    // Simulate API call
    await new Promise(resolve => setTimeout(resolve, 1000));
    setIsLoading(false);
    console.log(`${action} job ${jobId}`);
  };

  const handleRunJob = async (jobId: string) => {
    setIsLoading(true);
    await new Promise(resolve => setTimeout(resolve, 1500));
    setIsLoading(false);
    console.log(`Run job ${jobId}`);
  };

  const handleBulkAction = async (action: string) => {
    if (selectedRows.length === 0) return;
    
    setIsLoading(true);
    await new Promise(resolve => setTimeout(resolve, 2000));
    setIsLoading(false);
    setSelectedRows([]);
    console.log(`${action} jobs:`, selectedRows);
  };

  return (
    <div className="max-w-7xl mx-auto p-6">
      <Card>
        <Card.Header>
          <div className="flex justify-between items-start">
            <div>
              <h1 className="text-2xl font-bold text-gray-900">
                Cron Jobs Dashboard
              </h1>
              <p className="text-gray-600 mt-2">
                Monitor and manage your scheduled jobs
              </p>
            </div>
            
            {isLoading && (
              <div className="flex items-center gap-2 text-sm text-gray-600">
                <Spinner size="sm" />
                Processing...
              </div>
            )}
          </div>
        </Card.Header>

        <Card.Content>
          {/* Summary Stats */}
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
            <div className="bg-blue-50 rounded-lg p-4">
              <div className="flex items-center gap-2">
                <StatusIndicator status="active" size="sm" dot />
                <span className="text-sm font-medium text-gray-900">Active Jobs</span>
              </div>
              <div className="text-2xl font-bold text-blue-600 mt-1">
                {jobs.filter(j => j.status === 'active').length}
              </div>
            </div>
            
            <div className="bg-gray-50 rounded-lg p-4">
              <div className="flex items-center gap-2">
                <StatusIndicator status="inactive" size="sm" dot />
                <span className="text-sm font-medium text-gray-900">Inactive Jobs</span>
              </div>
              <div className="text-2xl font-bold text-gray-600 mt-1">
                {jobs.filter(j => j.status === 'inactive').length}
              </div>
            </div>
            
            <div className="bg-red-50 rounded-lg p-4">
              <div className="flex items-center gap-2">
                <StatusIndicator status="error" size="sm" dot />
                <span className="text-sm font-medium text-gray-900">Failed Jobs</span>
              </div>
              <div className="text-2xl font-bold text-red-600 mt-1">
                {jobs.filter(j => j.status === 'error').length}
              </div>
            </div>
            
            <div className="bg-green-50 rounded-lg p-4">
              <div className="flex items-center gap-2">
                <span className="text-sm font-medium text-gray-900">Avg Success Rate</span>
              </div>
              <div className="text-2xl font-bold text-green-600 mt-1">
                {(jobs.reduce((acc, job) => acc + job.successRate, 0) / jobs.length).toFixed(1)}%
              </div>
            </div>
          </div>

          {/* Bulk Actions */}
          {selectedRows.length > 0 && (
            <Alert variant="info" className="mb-4">
              <div className="flex items-center justify-between">
                <span>
                  {selectedRows.length} job{selectedRows.length === 1 ? '' : 's'} selected
                </span>
                <div className="flex gap-2">
                  <Button
                    variant="secondary"
                    size="sm"
                    onClick={() => handleBulkAction('pause')}
                    disabled={isLoading}
                  >
                    Pause Selected
                  </Button>
                  <Button
                    variant="secondary"
                    size="sm"
                    onClick={() => handleBulkAction('resume')}
                    disabled={isLoading}
                  >
                    Resume Selected
                  </Button>
                  <Button
                    variant="danger"
                    size="sm"
                    onClick={() => handleBulkAction('delete')}
                    disabled={isLoading}
                  >
                    Delete Selected
                  </Button>
                </div>
              </div>
            </Alert>
          )}

          {/* Data Table */}
          {isLoading ? (
            <div className="space-y-4">
              <Skeleton className="h-12 w-full" />
              <Skeleton.List lines={5} className="h-16" />
            </div>
          ) : (
            <Table
              columns={columns}
              data={jobs}
              selectable
              selectedRows={selectedRows}
              onSelect={handleSelect}
              onSort={handleSort}
              sortConfig={sortConfig}
              className="w-full"
              data-testid="jobs-table"
            />
          )}
        </Card.Content>
      </Card>

      {/* Implementation Notes */}
      <Card className="mt-8">
        <Card.Header>
          <h2 className="text-lg font-semibold">Data Display Features</h2>
        </Card.Header>
        <Card.Content>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6 text-sm">
            <div>
              <h3 className="font-medium text-gray-900 mb-2">Table Features:</h3>
              <ul className="list-disc list-inside text-gray-600 space-y-1">
                <li>Column sorting with visual indicators</li>
                <li>Row selection with bulk actions</li>
                <li>Custom cell rendering</li>
                <li>Responsive design</li>
                <li>Loading states with skeletons</li>
              </ul>
            </div>
            
            <div>
              <h3 className="font-medium text-gray-900 mb-2">Status Indicators:</h3>
              <ul className="list-disc list-inside text-gray-600 space-y-1">
                <li>Real-time status with animations</li>
                <li>Color-coded success rates</li>
                <li>Category badges with consistent colors</li>
                <li>Accessible status descriptions</li>
                <li>Multiple display variants</li>
              </ul>
            </div>
          </div>
        </Card.Content>
      </Card>
    </div>
  );
};

export default DataDisplayExample;